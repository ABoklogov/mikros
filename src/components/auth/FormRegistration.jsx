import { useState, useEffect } from 'react';
import { useNavigation } from "@react-navigation/native";
import { useSelector, useDispatch } from 'react-redux';
import {
  StyleSheet,
  View,
  Text,
  KeyboardAvoidingView
} from 'react-native';
import PropTypes from 'prop-types';
import { registration } from 'store/auth/authOperations';
import { registerUser } from 'store/auth/authSlice';
import API from 'services/utility-api';
// import components
import HeaderRegistration from 'components/auth/HeaderRegistration';
import InputPassword from 'components/auth/InputPassword';
import InputPhone from 'components/auth/InputPhone';
import CityList from 'components/auth/CityList';
import Input from 'components/shared/Input';
import MainButton from 'components/shared/MainButton';
import Title from 'components/shared/Title';
import MainModal from 'components/shared/MainModal';
// import vars
import { strings, fonts } from 'res/vars';
import { text } from 'res/palette';

const initialState = {
  name: '',
  city: '',
  phone: '',
  email: '',
  password: '',
};

export default FormRegistration = ({
  opensKeyboard,
  setShowBackdrop,
  showBackdrop
}) => {
  const { auth } = useSelector(state => state);
  const dispatch = useDispatch();
  const navigation = useNavigation();

  const [state, setState] = useState(initialState);
  const [firstStep, setFirstStep] = useState(true); // –ø–µ—Ä–≤—ã–π —à–∞–≥
  // –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
  const [repeatPassword, setRepeatPassword] = useState('');
  // –æ—à–∏–±–∫–∏
  const [errorName, setErrorName] = useState(true);
  const [errorCity, setErrorCity] = useState(true);
  const [errorPhone, setErrorPhone] = useState(true);
  const [errorEmail, setErrorEmail] = useState(true);
  const [errorPassword, setErrorPassword] = useState(true);
  const [errorRepeatPassword, setErrorRepeatPassword] = useState(true);
  // —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
  const [messageName, setMessageName] = useState('');
  const [messageCity, setMessageCity] = useState('');
  const [messagePhone, setMessagePhone] = useState('');
  const [messageEmail, setMessageEmail] = useState('');
  const [messagePassword, setMessagePassword] = useState('');
  const [messageRepeatPassword, setMessageRepeatPassword] = useState('');
  // –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
  const [activeBtnGoStep, setActiveBtnGoStep] = useState(false);
  const [activeBtn, setActiveBtn] = useState(false);
  // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(false);
  // —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
  const [listCity, setListCity] = useState([]);

  useEffect(() => {
    // –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (auth.registered === 'success') {
      toglleModalSuccess();
      dispatch(registerUser(''));
      // –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    } else if (auth.registered === 'rejected') {
      dispatch(registerUser(''));
      toglleModalError();
    } else {
      return
    };
  }, [auth.registered]);

  useEffect(() => {
    // –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π
    if (state.name && state.city && state.phone) {
      setActiveBtnGoStep(true);
    } else {
      setActiveBtnGoStep(false);
    };

    // –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π
    if (state.email && state.password && repeatPassword) {
      setActiveBtn(true);
    } else {
      setActiveBtn(false);
    };
  }, [
    state.name,
    state.city,
    state.phone,
    state.email,
    state.email,
    state.password,
    repeatPassword
  ]);

  // —Å–ª–µ–¥–∏—Ç, —á—Ç–æ–±—ã –ø–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞–ª–∏
  useEffect(() => {
    (state.password !== repeatPassword) ? setErrorRepeatPassword(true) : setErrorRepeatPassword(false);
  }, [state.password, repeatPassword]);

  const goToNextStep = () => {
    // –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –≤—ã—Ö–æ–¥–∏–º
    if (!activeBtnGoStep) return;
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—ç—Ç–∞–ø–Ω–æ –≤—Å–µ –∏–Ω–ø—É—Ç—ã, –µ—Å–ª–∏ –≤—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (errorName) {
      setMessageName('–≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è');
      setErrorName(true);
      return
    } else if (errorCity) {
      setMessageCity('–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
      setErrorCity(true);
      return
    } else if (errorPhone) {
      setMessagePhone('–≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      setErrorPhone(true);
      return
    } else {
      // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ—Ä–æ–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      setFirstStep(false);
      console.log('submitState', state);
    };
  };

  const submitState = () => {
    // –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –≤—ã—Ö–æ–¥–∏–º
    if (!activeBtn) return;
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—ç—Ç–∞–ø–Ω–æ –≤—Å–µ –∏–Ω–ø—É—Ç—ã, –µ—Å–ª–∏ –≤—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–µ–π—Ç
    if (errorEmail) {
      setMessageEmail('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞');
      return
    } else if (errorPassword) {
      setMessagePassword('–Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return
    } else if (errorRepeatPassword) {
      setMessageRepeatPassword('–ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return
    } else {
      // –æ—á–∏—â–∞–µ–º state
      setErrorEmail(false);
      setErrorPassword(false);
      setErrorRepeatPassword(false);
      setMessageEmail('');
      setMessagePassword('');
      setMessageRepeatPassword('');
      // setRepeatPassword('');
      // setState(initialState);
      // setActiveBtn(false);

      dispatch(registration(state));
      console.log('submitState', state);
    };
  };

  const onChangeName = (value) => {
    // –ò–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
    (value.length > 2) ? setErrorName(false) : setErrorName(true);
    setState((prevState) => ({ ...prevState, name: value }));
  };
  const onChangeCity = async (value) => {
    // –ù–∞–±–æ—Ä –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä(–ª–∞—Ç–∏–Ω–∏—Ü–∞ + –∫–∏—Ä–∏–ª–ª–∏—Ü–∞):
    // const re = /^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9]+$/;
    // const errCity = !re.test(value);
    // setErrorCity(errCity);
    (value.length > 2) ? setErrorCity(false) : setErrorCity(true);
    setState((prevState) => ({ ...prevState, city: value }));

    // –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≥–æ—Ä–æ–¥–∞
    if (state.city.length < 5) {
      const { suggestions } = await API.fetchAddress(value);
      console.log("üöÄ –≥–æ—Ä–æ–¥–∞", suggestions)
      // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ –Ω–∞–ª–∏—á–∏—é –≥–æ—Ä–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      setListCity(suggestions.filter(el => el.data.city));
    }
  };
  const onChangePhone = (value) => {
    // const re = /^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$/;
    // const errPhone = !re.test(value);
    // setErrorPhone(errPhone);
    (value.length >= 7) ? setErrorPhone(false) : setErrorPhone(true);
    setState((prevState) => ({ ...prevState, phone: value }));
  };

  const onChangeEmail = (value) => {
    const re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    const errEmail = !re.test(value);

    setErrorEmail(errEmail);
    setState((prevState) => ({ ...prevState, email: value }));
  };

  const onChangePassword = (value) => {
    // –ü–∞—Ä–æ–ª—å: –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):
    (value.length > 5) ? setErrorPassword(false) : setErrorPassword(true);
    setState((prevState) => ({ ...prevState, password: value }));
  };

  const toglleModalSuccess = () => {
    setSuccess(!success);
    setShowBackdrop(!showBackdrop);
  };
  const toglleModalError = () => {
    setError(!error);
    setShowBackdrop(!showBackdrop);
  };
  const pressToCity = (value) => {
    (value.length > 2) ? setErrorCity(false) : setErrorCity(true);
    setState((prevState) => ({ ...prevState, city: value }));
    setListCity([]);
  };

  return (
    <View style={styles.form}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <View style={styles.titleBox}>
          <Title text={'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'} />
        </View>
        <View style={styles.headerBox}>
          <HeaderRegistration
            firstStep={firstStep}
            setFirstStep={setFirstStep}
            goToNextStep={goToNextStep}
          />
        </View>

        {/* –ø–µ—Ä–≤—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        {firstStep && (
          <View>
            <View style={styles.inputBox}>
              <Input
                name={'name'}
                autoFocus={true}
                placeholder={strings.placeholders.name}
                opensKeyboard={opensKeyboard}
                stateKey={state.name}
                onChange={onChangeName}
                error={errorName}
                errorMessage={messageName}
                infoTitle={strings.alertInputs.name.title}
                infoText={strings.alertInputs.name.text}
              />
            </View>

            <View style={styles.inputBox}>
              <Input
                name={'city'}
                placeholder={strings.placeholders.city}
                opensKeyboard={opensKeyboard}
                stateKey={state.city}
                onChange={onChangeCity}
                error={errorCity}
                errorMessage={messageCity}
                infoTitle={strings.alertInputs.city.title}
                infoText={strings.alertInputs.city.text}
              />
              {/* —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ */}
              <CityList
                listCity={listCity}
                selectCity={pressToCity}
              />
            </View>

            <InputPhone
              placeholder={strings.placeholders.phone}
              opensKeyboard={opensKeyboard}
              stateKey={state.phone}
              onChange={onChangePhone}
              error={errorPhone}
              errorMessage={messagePhone}
              infoTitle={strings.alertInputs.phone.title}
              infoText={strings.alertInputs.phone.text}
            />

            <View style={styles.button}>
              <MainButton
                text={'–î–∞–ª–µ–µ'}
                onPress={goToNextStep}
                active={activeBtnGoStep}
              />
            </View>
          </View>
        )}

        {/* –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        {!firstStep && (
          <View>
            <View style={styles.inputBox}>
              <Input
                name={'email'}
                autoFocus={true}
                placeholder={strings.placeholders.higherEmail}
                opensKeyboard={opensKeyboard}
                stateKey={state.email}
                onChange={onChangeEmail}
                error={errorEmail}
                errorMessage={messageEmail}
                infoTitle={strings.alertInputs.email.title}
                infoText={strings.alertInputs.email.text}
              />
            </View>

            <View style={styles.inputBox}>
              <InputPassword
                placeholder={strings.placeholders.inventionPassword}
                opensKeyboard={opensKeyboard}
                stateKey={state.password}
                onChange={onChangePassword}
                error={errorPassword}
                errorMessage={messagePassword}
              // infoTitle={strings.alertInputs.password.title}
              // infoText={strings.alertInputs.password.text}
              />
            </View>

            <InputPassword
              placeholder={strings.placeholders.repeatPassword}
              opensKeyboard={opensKeyboard}
              stateKey={repeatPassword}
              onChange={setRepeatPassword}
              error={errorRepeatPassword}
              errorMessage={messageRepeatPassword}
            // infoTitle={strings.alertInputs.password.title}
            // infoText={strings.alertInputs.password.text}
            />

            <View style={styles.button}>
              <MainButton
                text={'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
                onPress={submitState}
                active={activeBtn}
              />
            </View>
          </View>
        )}

        {/* –º–æ–¥–∞–ª–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        {
          <MainModal
            modalVisible={success}
            removeModal={toglleModalSuccess}
            name={'auth'}
          >
            <View style={styles.modalView}>
              <Text style={styles.modalBottomText}>
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
              </Text>

              <MainButton
                text={'–í—Ö–æ–¥'}
                onPress={() => {
                  navigation.navigate(strings.nameNestedProfile.logIn);
                }}
              />
            </View>
          </MainModal>
        }
        {/* –º–æ–¥–∞–ª–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        {
          <MainModal
            modalVisible={error}
            removeModal={toglleModalError}
            name={'auth'}
          >
            <View style={styles.modalView}>
              <Text style={styles.modalTopText}>–û—à–∏–±–∫–∞</Text>
              <Text style={styles.modalBottomText}>
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–π –ø–æ—á—Ç–æ–π.
              </Text>

              <MainButton
                text={'Ok'}
                onPress={toglleModalError}
              />
            </View>
          </MainModal>
        }
      </KeyboardAvoidingView>
    </View>
  );
};

const styles = StyleSheet.create({
  form: {
    justifyContent: 'flex-start',
  },
  headerBox: {
    marginBottom: 20,
  },
  titleBox: {
    alignItems: 'center',
    marginBottom: 20,
  },
  inputBox: {
    position: 'relative',
    marginBottom: 15,
  },
  button: {
    marginTop: 20,
  },
  // –º–æ–¥–∞–ª–∫–∞ 
  modalView: {
    minWidth: 250,
  },
  modalTopText: {
    ...text,
    marginBottom: 10,
    fontFamily: fonts.bold,
    marginTop: 20,
    textAlign: "center",
  },
  modalBottomText: {
    ...text,
    marginBottom: 20,
    marginTop: 15,
    textAlign: "center",
  },
});

FormRegistration.propTypes = {
  opensKeyboard: PropTypes.func,
  setShowBackdrop: PropTypes.func,
  showBackdrop: PropTypes.bool,
};
