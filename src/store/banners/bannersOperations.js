import homeAPI from "services/home-api";
import API from "services/catalog-api";

import {
  setBanners,
  loadingSetBanners,
  errorSetBanners,
  setBannersProducts,
  loadingSetBannersProducts,
  errorSetBannersProducts,
  setFirstBootProduct,
  setImageProduct,
  setRestProduct,
  loadingSetProduct,
  errorSetProduct,
} from './bannersSlice';

// —Ñ—É–Ω–∫–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const sortArr = (arr) => {
  return arr.sort((a, b) => {
    if (a.sort > b.sort) return 1;
    if (a.sort < b.sort) return -1;
    return 0;
  });
};

// –±–∞–Ω–Ω–µ—Ä—ã
export const fetchBanners = () => async (dispatch, getState) => {
  try {
    dispatch(loadingSetBanners(true));

    const { data } = await homeAPI.fetchBanners();

    if (data) {
      dispatch(loadingSetBanners(false));
      dispatch(errorSetBanners(''));
      // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
      const totalArray = sortArr(data);
      console.log("üöÄ ~ —Å–ø–∏—Å–æ–∫ –±–∞–Ω–Ω–µ—Ä–æ–≤", totalArray)
      dispatch(setBanners(totalArray))
    };
  } catch (error) {
    dispatch(errorSetBanners(error.message));
    dispatch(loadingSetBanners(false));
    console.log(error.message);
  };
};

// —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export const fetchBannersProducts = (id, name) => async (dispatch, getState) => {
  const { homeBanners } = getState();
  try {
    // –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —á–∞—Å—Ç—å
    if (homeBanners.products.idSection === id) {
      return
    } else {
      dispatch(loadingSetBannersProducts(true));

      const { data } = await API.fetchProducts(id);

      if (data === undefined) {
        throw new Error('Server Error!');
      } else {
        dispatch(loadingSetBannersProducts(false));
        dispatch(errorSetBannersProducts(''));

        // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—Ö–æ–¥—è—â–∏–π –º–∞—Å—Å–∏–≤ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        let totalArr = data.reduce((prev, item) => {
          return prev.concat(item);
        }, []);
        // –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π —Ç–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if (totalArr.length > 0) {
          totalArr = sortArr(totalArr);
        };

        console.log("üöÄ ~ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –±–∞–Ω–Ω–µ—Ä–∞", totalArr)
        dispatch(setBannersProducts({ totalArr, id, name }))
      };
    };
  } catch (error) {
    dispatch(errorSetBannersProducts(error.message));
    dispatch(loadingSetBannersProducts(false));
    console.log(error.message);
  };
};

// –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
export const fetchBannerProduct = (id) => async (dispatch, getState) => {
  const { homeBanners } = getState();

  try {
    dispatch(loadingSetProduct(true));
    const data = await API.fetchProduct(id);
    console.log("üöÄ ~ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –±–∞–Ω–Ω–µ—Ä–∞", data)

    if (data) {
      dispatch(loadingSetProduct(false));
      dispatch(errorSetProduct(''));
    };

    // dispatch(setRestProduct())
  } catch (error) {
    dispatch(errorSetProduct(error.message));
    dispatch(loadingSetProduct(false));
    console.log(error.message);
  };
};