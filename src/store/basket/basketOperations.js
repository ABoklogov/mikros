import API from "services/profile-api";
import {
  setBasket,
  loadingSetBasket,
  errorSetBasket,
  loadingCalculateBasket,
  errorCalculateBasket,
} from './basketSlice';

export const fetchBasket = () => async (dispatch, getState) => {
  const { auth } = getState();
  try {
    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞ –µ–≥–æ –∫–æ—Ä–∑–∏–Ω–æ–π
    if (auth.isLoggedIn) {
      dispatch(loadingSetBasket(true));
      const { data } = await API.fetchBasket();

      if (data === undefined) {
        throw new Error('Server Error!');
      } else {
        dispatch(loadingSetBasket(false));
        dispatch(errorSetBasket(''));
        console.log("üöÄ ~ –∫–æ—Ä–∑–∏–Ω–∞", data.data)
        dispatch(setBasket(data.data));
      };
    } else {
      //  TODO: –∑–¥–µ—Å—å –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞ –∫–æ—Ä–∑–∏–Ω–æ–π –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ fuser_id

      // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–æ—Å—Ç–∞–µ–º –µ–≥–æ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      // dispatch(loadingSetBasket(true));
      // const localBasket = await getLocalBasket();
      // console.log("–∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞", localBasket)
      // if (localBasket === null) {
      //   dispatch(loadingSetBasket(false));
      //   dispatch(errorSetBasket(''));
      //   setLocalBasket([]);
      // } else if (Object.keys(localBasket).length === 0) {
      //   dispatch(loadingSetBasket(false));
      //   dispatch(errorSetBasket(''));
      //   dispatch(setBasket([]));
      // } else {
      //   dispatch(loadingSetBasket(false));
      //   dispatch(errorSetBasket(''));
      //   // dispatch(setBasket(arr));
      // };
    };
  } catch (error) {
    dispatch(loadingSetBasket(false));
    dispatch(errorSetBasket(error.message));
    console.log(error.message);
  }
};
export const calculateBasket = (product, quantity) => async (dispatch, getState) => {
  const { auth, basket } = getState();
  try {
    if (auth.isLoggedIn) {

    } else {
      // TODO: —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ –ø—Ä–∏ —ç—Ç–æ–º fuser_id, –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –≤ —Å—Ç–æ—Ä

      // dispatch(loadingCalculateBasket(true));
      // const localBasket = await getLocalBasket();
      // // —Å—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
      // const totalLocalBasket = calcLocalBasket(localBasket, product.ID, quantity);
      // // —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
      // const totalBasket = calcBasket(basket.items, product, quantity);
      // dispatch(loadingCalculateBasket(false));
      // dispatch(errorCalculateBasket(''));
      // setLocalBasket(totalLocalBasket);
      // dispatch(setBasket(totalBasket));
    };
  } catch (error) {
    dispatch(loadingCalculateBasket(false));
    dispatch(errorCalculateBasket(error.message));
    console.log(error.message);
  }
};