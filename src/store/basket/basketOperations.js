import API from "services/profile-api";
import {
  setLocalBasket,
  removeLocalBasket,
  getLocalBasket,
  calcLocalBasket,
  calcBasket,
} from 'hooks/basket';
import {
  setBasket,
  loadingSetBasket,
  errorSetBasket,
  loadingCalculateBasket,
  errorCalculateBasket,
} from './basketSlice';

export const fetchBasket = () => async (dispatch, getState) => {
  const { auth } = getState();
  try {
    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞ –µ–≥–æ –∫–æ—Ä–∑–∏–Ω–æ–π
    if (auth.isLoggedIn) {
      dispatch(loadingSetBasket(true));
      const { data } = await API.fetchBasket();

      if (data === undefined) {
        throw new Error('Server Error!');
      } else {
        dispatch(loadingSetBasket(false));
        dispatch(errorSetBasket(''));
        console.log("üöÄ ~ –∫–æ—Ä–∑–∏–Ω–∞", data.data)
        dispatch(setBasket(data.data));
      };
    } else {
      // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–æ—Å—Ç–∞–µ–º –µ–≥–æ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      dispatch(loadingSetBasket(true));
      const localBasket = await getLocalBasket();
      console.log("–∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞", localBasket)

      if (localBasket === null) {
        dispatch(loadingSetBasket(false));
        dispatch(errorSetBasket(''));
        setLocalBasket([]);
      } else if (Object.keys(localBasket).length === 0) {
        dispatch(loadingSetBasket(false));
        dispatch(errorSetBasket(''));
        dispatch(setBasket([]));
      } else {
        dispatch(loadingSetBasket(false));
        dispatch(errorSetBasket(''));
        //  TODO: –∑–¥–µ—Å—å –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞ –∫–æ—Ä–∑–∏–Ω–æ–π –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç.–µ. –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –º–∞—Å—Å–∏–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã)
        // dispatch(setBasket(arr));
      };
    };
  } catch (error) {
    dispatch(loadingSetBasket(false));
    dispatch(errorSetBasket(error.message));
    console.log(error.message);
  }
};
export const calculateBasket = (product, quantity) => async (dispatch, getState) => {
  const { auth, basket } = getState();
  try {
    if (auth.isLoggedIn) {

    } else {
      dispatch(loadingCalculateBasket(true));
      const localBasket = await getLocalBasket();

      // —Å—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
      const totalLocalBasket = calcLocalBasket(localBasket, product.ID, quantity);
      console.log("–∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞", totalLocalBasket)
      // —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
      const totalBasket = calcBasket(basket.items, product, quantity);

      dispatch(loadingCalculateBasket(false));
      dispatch(errorCalculateBasket(''));
      setLocalBasket(totalLocalBasket);
      dispatch(setBasket(totalBasket));
    };
  } catch (error) {
    dispatch(loadingCalculateBasket(false));
    dispatch(errorCalculateBasket(error.message));
    console.log(error.message);
  }
};