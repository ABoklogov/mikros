import API from 'services/auth-api';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  registerUser,
  logInUser,
  logOutUser,
  setCurrentUser,
  errorUser,
  loadingUser,
  resultLogIn,
} from './authSlice';

const token = {
  set(token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
  },
  unset() {
    axios.defaults.headers.common.Authorization = '';
  },
};
// –∑–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const setStoreToken = async (value) => {
  try {
    await AsyncStorage.setItem('token', value);
  } catch (error) {
    console.log(error.message)
  };
};

// —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const removeStoreToken = async () => {
  try {
    await AsyncStorage.removeItem('token');
  } catch (error) {
    console.log(error.message)
  };
};

// –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
const getStoreToken = async () => {
  try {
    return await AsyncStorage.getItem('token')
  } catch (error) {
    console.log(error.message)
  };
}

// —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export const registration = (credentials) => async (dispatch, getState) => {
  try {
    dispatch(loadingUser(true));

    const { data } = await API.registerUser(credentials);
    console.log("üöÄ ~ registration ~ data", data)

    if (data === undefined) {
      throw new Error('Server Error!');
    } else {
      if (data.registered) {
        dispatch(loadingUser(false));
        dispatch(errorUser(''));
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–µ–π—Ç
        dispatch(registerUser('success'));
      };
    };
  } catch (error) {
    dispatch(errorUser(error.message));
    dispatch(loadingUser(false));
    dispatch(registerUser('rejected'));
    console.log("üöÄ ~ registration ~ error", error)
    console.log(error.message);
  };
};

// –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
export const logIn = (credentials) => async (dispatch, getState) => {
  try {
    dispatch(loadingUser(true));

    const data = await API.logInUser(credentials);

    if (data === undefined) {
      throw new Error('Server Error!');
    } else {
      dispatch(loadingUser(false));
      dispatch(errorUser(''));

      console.log("üöÄ ~ logIn ~ data", data)
      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–µ–π—Ç
      dispatch(logInUser({ user: data.user, token: data.token }));
      dispatch(resultLogIn('success'));
      token.set(data.token);
      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      setStoreToken(data.token);
    };
  } catch (error) {
    dispatch(errorUser(error.message));
    dispatch(loadingUser(false));
    dispatch(resultLogIn('rejected'));
    console.log(error.message);
  };
};

// –≤—ã—Ö–æ–¥
export const logOut = () => async (dispatch, getState) => {
  try {
    await API.logOutUser();
    dispatch(logOutUser());
    token.unset();
    // —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    removeStoreToken();
  } catch (error) {
    console.log(error.message);
  };
};

// –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
export const fetchCurrentUser = () => async (dispatch, getState) => {
  try {
    const persistedToken = await getStoreToken(); // –∑–∞–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if (!persistedToken) return;

    token.set(persistedToken); // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ –≤  axios.defaults.headers

    dispatch(loadingUser(true));
    const { data } = await API.fetchCurrentUser();

    if (data === undefined) {
      throw new Error('Server Error!');
    } else {
      dispatch(loadingUser(false));
      dispatch(errorUser(''));
      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–µ–π—Ç
      dispatch(setCurrentUser({ user: data.data, token: persistedToken }));
      token.set(persistedToken);
      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      setStoreToken(persistedToken);
      console.log("üöÄ ~ —Ç–µ–∫—É—â–∏—é —é–∑–µ—Ä", data.data)
    };
  } catch (error) {
    // —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–æ–≤—Å—é–¥—É
    token.unset();
    removeStoreToken();
    dispatch(loadingUser(false));
    dispatch(errorUser(error.message));
    console.log(error.message);
  }
};
